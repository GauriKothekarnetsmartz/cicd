[{"/home/gauri/Notes-fullstack-app/notes-ui/src/index.js":"1","/home/gauri/Notes-fullstack-app/notes-ui/src/App.js":"2","/home/gauri/Notes-fullstack-app/notes-ui/src/reportWebVitals.js":"3","/home/gauri/Notes-fullstack-app/notes-ui/src/components/Table.js":"4","/home/gauri/Notes-fullstack-app/notes-ui/src/components/Content.js":"5"},{"size":500,"mtime":1710926489625,"results":"6","hashOfConfig":"7"},{"size":454,"mtime":1710926489621,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1710926489625,"results":"9","hashOfConfig":"7"},{"size":5011,"mtime":1710926489625,"results":"10","hashOfConfig":"7"},{"size":2192,"mtime":1710926489625,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14e6vlt",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/gauri/Notes-fullstack-app/notes-ui/src/index.js",[],"/home/gauri/Notes-fullstack-app/notes-ui/src/App.js",["24"],"import Table from \"./components/Table\";\nimport Content from \"./components/Content\";\nimport { BrowserRouter as Router, Route, Link,Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App\">\n        </div>\n          <Switch>\n            <Route path=\"/\" exact component={Table} />\n            <Route path=\"/content/:id\"  component={Content} />\n          </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","/home/gauri/Notes-fullstack-app/notes-ui/src/reportWebVitals.js",[],"/home/gauri/Notes-fullstack-app/notes-ui/src/components/Table.js",["25","26","27","28","29","30","31","32","33","34"],"import React, { Component } from 'react'\nimport './Table.css';\nimport { Link } from \"react-router-dom\";\n\nclass Table extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            notes: [],\n            notenumber:null,\n            sortConfig: {\n                key: null,\n                direction: null,\n            },\n            err: null,\n            isLoading: false\n        }\n        this.onSort = this.onSort.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: true })\n        let api_url = 'http://localhost:4006/notes';\n        fetch(api_url)\n            .then(res => {\n                if(res.status >= 400) {\n                    throw new Error(\"Server responds with error!\");\n                }\n                return res.json();\n            })\n            .then(notes => {\n                    this.setState({\n                        notes,\n                        isLoading: false\n                    })\n                    console.log(console.log(this.state.notes))\n                },\n                err => {\n                    this.setState({\n                        err,\n                        isLoading: false\n                    })\n                });\n    }\n\n    onSort(event, sortKey){\n        const notes = this.state.notes;\n        if(sortKey == 'title'){\n            if(this.state.sortConfig.key == sortKey && this.state.sortConfig.direction == \"ascending\"){\n                notes.sort((a, b) => b['noteversions'][0].title.toString().localeCompare(a.noteversions[0].title.toString()))\n                this.setState({sortConfig: {key: sortKey, direction: \"descending\"}})\n            }\n            else {\n                notes.sort((a, b) => a['noteversions'][0].title.toString().localeCompare(b.noteversions[0].title.toString()))\n                this.setState({sortConfig: {key: sortKey, direction: \"ascending\"}})\n            }\n        }\n\n        else if( sortKey === 'modified At'){\n            if(this.state.sortConfig.key == sortKey && this.state.sortConfig.direction == \"ascending\") {\n                notes.sort((a,b) => b.noteversions[0].updatedAt.toString().localeCompare(a.noteversions[0].updatedAt.toString()))\n                this.setState({sortConfig: {key: sortKey, direction: \"descending\"}})\n            }\n            else {\n                notes.sort((a, b) => a.noteversions[0].updatedAt.toString().localeCompare(b.noteversions[0].updatedAt.toString()))\n                this.setState({sortConfig: {key: sortKey, direction: \"ascending\"}})\n            }\n        }\n\n        else if( sortKey === 'created At') {\n            if(this.state.sortConfig.key == sortKey && this.state.sortConfig.direction == \"ascending\") {\n                notes.sort((a, b) => b.createdAt.toString().localeCompare(a.createdAt.toString()))\n                this.setState({sortConfig: {key: sortKey, direction: \"descending\"}})\n            }\n            else {\n                notes.sort((a, b) => a.createdAt.toString().localeCompare(b.createdAt.toString()))\n                this.setState({sortConfig: {key: sortKey, direction: \"ascending\"}})\n            }\n        }\n        else {\n            if(this.state.sortConfig.key == sortKey && this.state.sortConfig.direction == \"ascending\") {\n                notes.sort((a, b) => b.NoteID.toString().localeCompare(a.NoteID.toString(), undefined, {numeric: true}))\n                this.setState({sortConfig: {key: sortKey, direction: \"descending\"}})\n            }\n            else {\n                notes.sort((a, b) => a.NoteID.toString().localeCompare(b.NoteID.toString(), undefined, {numeric: true}))\n                this.setState({sortConfig: {key: sortKey, direction: \"ascending\"}})\n            }\n        }\n        this.setState({notes})\n    }\n\n\n    renderTableData() {\n        return this.state.notes.map((note, index) => {\n            const { NoteID, isDeleted, createdAt, noteversions } = note\n            let title = noteversions[0].title\n            let update = noteversions[0].updatedAt\n            return (\n                <tr key={NoteID}>\n                    <td>{NoteID}</td>\n                    <td><Link to={\"/content/\"+NoteID} class='link'>{title}</Link></td>\n                    <td>{createdAt}</td>\n                    <td>{update}</td>\n                </tr>\n            )\n        })\n    }\n\n\n\n    renderTableHeader() {\n        let heder = ['ID', 'title', 'created At', 'modified At']\n        return heder.map(head => {\n            return <th className='unselectable' key={head} onClick={e => this.onSort(e, head)}>{head.toUpperCase()}</th>\n        })\n    }\n\n\n    render() {\n        return (\n            <div class='return'>\n                <h1>List of Notes</h1>\n                    <table id='notes'>\n                        <tbody>\n                            <tr>{this.renderTableHeader()}</tr>\n                            {this.renderTableData()}\n                        </tbody>\n                    </table>\n                </div>\n        )\n    }\n}\n\nexport default Table","/home/gauri/Notes-fullstack-app/notes-ui/src/components/Content.js",[],{"ruleId":"35","severity":1,"message":"36","line":3,"column":42,"nodeType":"37","messageId":"38","endLine":3,"endColumn":46},{"ruleId":"39","severity":1,"message":"40","line":48,"column":20,"nodeType":"41","messageId":"42","endLine":48,"endColumn":22},{"ruleId":"39","severity":1,"message":"40","line":49,"column":42,"nodeType":"41","messageId":"42","endLine":49,"endColumn":44},{"ruleId":"39","severity":1,"message":"40","line":49,"column":88,"nodeType":"41","messageId":"42","endLine":49,"endColumn":90},{"ruleId":"39","severity":1,"message":"40","line":60,"column":42,"nodeType":"41","messageId":"42","endLine":60,"endColumn":44},{"ruleId":"39","severity":1,"message":"40","line":60,"column":88,"nodeType":"41","messageId":"42","endLine":60,"endColumn":90},{"ruleId":"39","severity":1,"message":"40","line":71,"column":42,"nodeType":"41","messageId":"42","endLine":71,"endColumn":44},{"ruleId":"39","severity":1,"message":"40","line":71,"column":88,"nodeType":"41","messageId":"42","endLine":71,"endColumn":90},{"ruleId":"39","severity":1,"message":"40","line":81,"column":42,"nodeType":"41","messageId":"42","endLine":81,"endColumn":44},{"ruleId":"39","severity":1,"message":"40","line":81,"column":88,"nodeType":"41","messageId":"42","endLine":81,"endColumn":90},{"ruleId":"35","severity":1,"message":"43","line":96,"column":29,"nodeType":"37","messageId":"38","endLine":96,"endColumn":38},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isDeleted' is assigned a value but never used."]